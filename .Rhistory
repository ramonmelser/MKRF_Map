class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 6),
editable = TRUE) %>%
formatStyle('Class',
target = 'row',
backgroundColor = styleEqual(c(1,2,3,4,5,6), c("gray", "white", "gray", "white", "gray", "white")))
#select RGB bands
Planet2 <- Planet[[1:4]]
#kmeans cannot take NA, so assign value
Planet2[is.na(Planet2)] <- -9999
set.seed(99)
kmncluster <- kmeans(Planet2[], centers=6, iter.max = 300, nstart = 3, algorithm = "Lloyd")
result <- Planet2[[1]]
result <- setValues(result, kmncluster$cluster)
result <- rast(result)
result <- crop(result, MKRF, mask=TRUE)
classified_pal <- colorNumeric(c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "Planet",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
##Set layer controls and enable side by side
addLayersControl(baseGroups = c("Planet"),
overlayGroups = c("Plots")) %>%
addSidebyside(layerId = "sidecontrols",
rightId = "baseid1",
leftId  = "baseid2") %>%
##Add scale bar and enable GPS live location
addScaleBar(position = c("bottomleft")) %>%
addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 10, setView = TRUE))
e
#select RGB bands
Planet2 <- Planet[[1:4]]
#kmeans cannot take NA, so assign value
Planet2[is.na(Planet2)] <- -9999
set.seed(99)
kmncluster <- kmeans(Planet2[], centers=7, iter.max = 300, nstart = 3, algorithm = "Lloyd")
result <- Planet2[[1]]
result <- setValues(result, kmncluster$cluster)
result <- rast(result)
result <- crop(result, MKRF, mask=TRUE)
classified_pal <- colorNumeric(c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "Planet",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
##Set layer controls and enable side by side
addLayersControl(baseGroups = c("Planet"),
overlayGroups = c("Plots")) %>%
addSidebyside(layerId = "sidecontrols",
rightId = "baseid1",
leftId  = "baseid2") %>%
##Add scale bar and enable GPS live location
addScaleBar(position = c("bottomleft")) %>%
addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 10, setView = TRUE))
e
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 6),
editable = TRUE) %>%
formatStyle('Class',
target = 'row',
backgroundColor = styleEqual(c(1,2,3,4,5,6), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 6),
editable = TRUE) %>%
formatStyle('Class',
target = 'row',
backgroundColor = styleEqual(c(1,2,3,4,5,6), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Class',
target = 'row',
backgroundColor = styleEqual(c(1,2,3,4,5,6), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Class',
target = 'row',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Class',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Colour" ,"Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Co',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Colour" ,"Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Colour',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Colour" ,"Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Colour',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Colour" ,"Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Colour',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Colour',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Class',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Class',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Class',
backgroundColor = styleEqual(c(1,2,3,4,5,6,7), c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 6),
editable = TRUE) %>%
formatStyle('Class',
target = 'row',
backgroundColor = styleEqual(c(1,2,3,4,5,6), c("gray", "white", "gray", "white", "gray", "white")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Class',
target = 'row',
backgroundColor = styleEqual(c(1,2,3,4,5,6, 7), c("gray", "white", "gray", "white", "gray", "white")))
table2 <- read.csv("D:/Sync/MGEM_Loon_Lake/Classification_Table.csv")
DT::datatable(table2,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Class", "Name"),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('pdf'), pageLength = 7),
editable = TRUE) %>%
formatStyle('Class',
target = 'row',
backgroundColor = styleEqual(c(1,2,3,4,5,6, 7), c("gray", "white", "gray", "white", "gray", "white", "gray")))
classified_pal <- colorNumeric(c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "RGB",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
addLegend(pal = classified_pal ,values = values(result), group = "Planet", opacity = 1)
classified_pal <- colorNumeric(c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "RGB",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
addLegend(pal = classified_pal ,values = values(result), group = "Planet", opacity = 1) %>%
##Set layer controls and enable side by side
addLayersControl(baseGroups = c("Planet"),
overlayGroups = c("Plots")) %>%
addSidebyside(layerId = "sidecontrols",
rightId = "baseid1",
leftId  = "baseid2") %>%
##Add scale bar and enable GPS live location
addScaleBar(position = c("bottomleft")) %>%
addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 10, setView = TRUE))
e
classified_pal <- colorFactor(c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "RGB",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
addLegend(pal = classified_pal ,values = values(result), group = "Planet", opacity = 1) %>%
##Set layer controls and enable side by side
addLayersControl(baseGroups = c("Planet"),
overlayGroups = c("Plots")) %>%
addSidebyside(layerId = "sidecontrols",
rightId = "baseid1",
leftId  = "baseid2") %>%
##Add scale bar and enable GPS live location
addScaleBar(position = c("bottomleft")) %>%
addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 10, setView = TRUE))
e
result
#select RGB bands
Planet2 <- Planet[[1:4]]
#kmeans cannot take NA, so assign value
Planet2[is.na(Planet2)] <- -9999
set.seed(99)
kmncluster <- kmeans(Planet2[], centers=7, iter.max = 300, nstart = 3, algorithm = "Lloyd")
result
levels(result)
levels(result)
terra::levels(result)
is.factor(result)
res <- as.factor(result)
res
levels(res)
levels(res) <- c(1, 2, 3, 4, 5, 6)
levles(res)
levels(res)
res <- as.factor(result)
levels(res)
levels(res)
df <- as.data.frame(levels(res))
df
levels(res)[1]
levels(res)[[1]]
levels(res)[[,1]]
df <- as.data.frame(levels(res))
ddf
df
#select RGB bands
Planet2 <- Planet[[1:4]]
#kmeans cannot take NA, so assign value
Planet2[is.na(Planet2)] <- -9999
set.seed(99)
kmncluster <- kmeans(Planet2[], centers=7, iter.max = 300, nstart = 3, algorithm = "Lloyd")
result <- Planet2[[1]]
result <- setValues(result, kmncluster$cluster)
result <- rast(result)
result <- crop(result, MKRF, mask=TRUE)
result
result <- result-1
result
classified_pal <- colorFactor(c("#081d58", "#225ea8", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "RGB",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
addLegend(pal = classified_pal ,values = values(result), group = "Planet", opacity = 1) %>%
##Set layer controls and enable side by side
addLayersControl(baseGroups = c("Planet"),
overlayGroups = c("Plots")) %>%
addSidebyside(layerId = "sidecontrols",
rightId = "baseid1",
leftId  = "baseid2") %>%
##Add scale bar and enable GPS live location
addScaleBar(position = c("bottomleft")) %>%
addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 10, setView = TRUE))
e
classified_pal <- colorFactor(c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "RGB",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
addLegend(pal = classified_pal ,values = values(result), group = "Planet", opacity = 1) %>%
##Set layer controls and enable side by side
addLayersControl(baseGroups = c("Planet"),
overlayGroups = c("Plots")) %>%
addSidebyside(layerId = "sidecontrols",
rightId = "baseid1",
leftId  = "baseid2") %>%
##Add scale bar and enable GPS live location
addScaleBar(position = c("bottomleft")) %>%
addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 10, setView = TRUE))
e
#select RGB bands
Planet2 <- rast("D:/Sync/MGEM_Loon_Lake/Planet_RGB.tif")
Planet2
set.seed(99)
kmncluster <- kmeans(Planet2[], centers=7, iter.max = 300, nstart = 3, algorithm = "Lloyd")
#select RGB bands
Planet2 <- rast("D:/Sync/MGEM_Loon_Lake/Planet_RGB.tif")
Planet2 <- crop(Planet2, MKRF)
plot(Planet2)
set.seed(99)
kmncluster <- kmeans(Planet2[], centers=7, iter.max = 300, nstart = 3, algorithm = "Lloyd")
result <- Planet2[[1]]
result <- setValues(result, kmncluster$cluster)
plot(result)
result <- rast(result)
result <- crop(result, MKRF, mask=TRUE)
result <- Planet2[[1]]
result <- Planet2[[1]]
result <- setValues(result, kmncluster$cluster)
result <- crop(result, MKRF, mask=TRUE)
result
plot(result)
classified_pal <- colorFactor(c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "RGB",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
addLegend(pal = classified_pal ,values = values(result), group = "Planet", opacity = 1) %>%
##Set layer controls and enable side by side
addLayersControl(baseGroups = c("Planet"),
overlayGroups = c("Plots")) %>%
addSidebyside(layerId = "sidecontrols",
rightId = "baseid1",
leftId  = "baseid2") %>%
##Add scale bar and enable GPS live location
addScaleBar(position = c("bottomleft")) %>%
addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 10, setView = TRUE))
e
plot(result)
is.factor(result)
result <- as.factor(result)
plot(result)
classified_pal <- colorFactor(c("#081d58", "#225ea8", "#f7fcb9", "#006d2c", "#238b45", "#00441b", "#662506"), values(result),na.color = "transparent")
e <- leaflet(Plots, width = 600, height = 600) %>%
addMapPane("right", zIndex = 0) %>%
addMapPane("left",  zIndex = 0) %>%
addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
##add plots and enable labels
addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
##add Planet RGB and Unsupervised Classification
addRasterRGB(x = Planet, 3,2,1,
quantiles = c(0.02, 0.98), domain = NULL,
options = leafletOptions(pane = "left"), group = "RGB",
maxBytes = 11269792) %>%
addRasterImage(x = result, colors = classified_pal,
options = leafletOptions(pane = "right"), group = "Planet",
maxBytes = 11269792) %>%
addLegend(pal = classified_pal ,values = values(result), group = "Planet", opacity = 1) %>%
##Set layer controls and enable side by side
addLayersControl(baseGroups = c("Planet"),
overlayGroups = c("Plots")) %>%
addSidebyside(layerId = "sidecontrols",
rightId = "baseid1",
leftId  = "baseid2") %>%
##Add scale bar and enable GPS live location
addScaleBar(position = c("bottomleft")) %>%
addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 10, setView = TRUE))
e
table <- read.csv("D:/Sync/MGEM_Loon_Lake/Platforms.csv")
DT::datatable(table,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Platform", "Date of Acquisition", "Spatial Resolution", "Revisit Time", "Bands", "Number of Satellites", "Operating Since", "Free?"))
table <- read.csv("D:/Sync/MGEM_Loon_Lake/Platforms.csv")
DT::datatable(table,
rownames = FALSE,
class = 'cell-border stripe',
colnames = c("Platform", "Date of Acquisition", "Spatial Resolution", "Revisit Time", "Bands", "Number of Satellites", "Operating Since", "Free?"))
